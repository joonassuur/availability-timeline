{"version":3,"sources":["utils/dataGenerator.tsx","components/dataBar/hoverElement/HoverElement.tsx","components/icons/Icons.tsx","components/dataBar/DataBar.tsx","components/app/App.tsx","serviceWorker.tsx","index.tsx"],"names":["dataGenerator","yesterday","Date","now","yesterdayMinutes","Math","floor","minutesArray","availabilityBars","tempArr","i","date","day","getDate","month","toLocaleString","toUpperCase","year","getFullYear","toString","formatYear","substr","length","time","toLocaleTimeString","push","minute","availability","random","unavailable","filter","a","partially","filterUnavailable","x","data","HoverElement","mouseLocation","hoverDetails","notAvailableTime","notAvailableDetails","style","left","xCoord","top","yCoord","className","includes","map","e","DataBar","projectName","useState","setHoverDetails","setNotAvailableTime","setNotAvailableDetails","setMouseLocation","currentAvailability","slice","downtimeLength","totalUptime","round","key","onMouseOver","clientX","clientY","forEach","beginning","end","onMouseLeave","App","project","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a3ae5fdf.chunk.js","sourcesContent":["import { ReturnedDataTypes, DataStruct, TempStruct } from \"../types/types\";\r\n\r\nconst dataGenerator = (): ReturnedDataTypes => {\r\n  // 1440 minutes for 24 hours\r\n  const minutes: number = 1440;\r\n\r\n  const today: any = Date.now();\r\n  const yesterday: any = today - 86400000;\r\n\r\n  const yesterdayMinutes = Math.floor(yesterday / 60000);\r\n\r\n  // array of objects with minutes and an availability value corresponding to each minute\r\n  const minutesArray: DataStruct[] = [];\r\n\r\n  // array of availability values for colored bars matching for every 20 minutes\r\n  const availabilityBars: string[] = [];\r\n\r\n  // temporary array to be cleaned every 20 iterations (minutes)\r\n  let tempArr: TempStruct[] = [];\r\n\r\n  // generate availability\r\n  const generateAvailability = (): string => {\r\n    if (Math.random() < 0.999) {\r\n      return \"available\";\r\n    }\r\n    if (Math.random() < 0.5) {\r\n      return \"partially-available\";\r\n    }\r\n    return \"unavailable\";\r\n  };\r\n\r\n  // randomly generate availability for every minute\r\n  for (let i = 1; i <= minutes; i++) {\r\n    const convertToMS = (yesterdayMinutes + i) * 60000;\r\n\r\n    const date = new Date(convertToMS);\r\n    const day = date.getDate();\r\n    const month = date\r\n      .toLocaleString(\"default\", { month: \"short\" })\r\n      .toUpperCase();\r\n    const year = date.getFullYear().toString();\r\n    const formatYear = year.substr(year.length - 2);\r\n\r\n    const time = date.toLocaleTimeString(\"et-ET\");\r\n\r\n    // push the current iteration to a temporary array\r\n    tempArr.push({\r\n      minute: date,\r\n      availability: generateAvailability(),\r\n      time: `${time}Z / ${day}${month}${formatYear}`,\r\n    });\r\n    // chop the minutesArray into 20 minute chunks to match them up with availability status from availabilityBars array\r\n    if (i % 20 === 0) {\r\n      // check if any of the availability values in tempArr match with either \"unavailable\" or \"partially\". If they do, mark that entire particular bar with corresponding status, by pushing corresponding value to availabilityBars\r\n      const unavailable: object[] = tempArr.filter(\r\n        (a) => a.availability === \"unavailable\"\r\n      );\r\n      const partially: object[] = tempArr.filter(\r\n        (a) => a.availability === \"partially-available\"\r\n      );\r\n      if (unavailable.length > 0) {\r\n        availabilityBars.push(\"unavailable\");\r\n      } else if (partially.length > 0) {\r\n        availabilityBars.push(\"partially-available\");\r\n      } else {\r\n        availabilityBars.push(\"available\");\r\n      }\r\n      const filterUnavailable = tempArr.filter(\r\n        (x) => x.availability !== \"available\"\r\n      );\r\n      minutesArray.push({ data: tempArr, unavailable: filterUnavailable });\r\n      tempArr = [];\r\n    }\r\n  }\r\n  // minutesArray = array of entire 24 hours, with every minute corresponding to availability\r\n  // availabilityBars = colored bars chopped to 20 minute chunks, where color represents the worst event in 20 minutes\r\n  return { availabilityBars, minutesArray };\r\n};\r\n\r\nexport default dataGenerator;\r\n","import React from \"react\";\r\nimport { HoverElementProps } from \"../../../types/types\";\r\nimport { WarningIcon, AlertIcon } from \"../../icons/Icons\";\r\n\r\nconst HoverElement: React.FC<HoverElementProps> = ({\r\n  mouseLocation,\r\n  hoverDetails,\r\n  notAvailableTime,\r\n  notAvailableDetails,\r\n}) => {\r\n  return (\r\n    <div\r\n      style={{\r\n        left: `calc(${mouseLocation.xCoord}px - 150px)`,\r\n        top: `calc(${mouseLocation.yCoord}px - 130px)`,\r\n      }}\r\n      className=\"hover-container\"\r\n    >\r\n      <div className=\"time-data\">{hoverDetails}</div>\r\n      {notAvailableTime ? (\r\n        <>\r\n          <div className=\"outage-data\">\r\n            <span className=\"icon\">\r\n              {notAvailableTime.includes(\"Partial\")\r\n                ? AlertIcon()\r\n                : WarningIcon()}\r\n            </span>\r\n            <span className=\"text\">{notAvailableTime}:</span>\r\n          </div>\r\n          <div className=\"outage-data\">\r\n            {notAvailableDetails.map((e) => e.time)}\r\n          </div>\r\n        </>\r\n      ) : (\r\n        <div className=\"outage-data\">No outages</div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HoverElement;\r\n","import React from \"react\";\r\nimport \"./Icons.scss\";\r\n\r\nexport const WarningIcon = () => (\r\n  <span className=\"material-icons warning\">\r\n    warning\r\n  </span>\r\n);\r\nexport const AlertIcon = () => (\r\n  <span className=\"material-icons alert\">\r\n    warning\r\n  </span>\r\n);\r\n","import React, { useState } from \"react\";\r\n\r\nimport HoverElement from \"./hoverElement/HoverElement\";\r\nimport { DataBarProps, MouseCoords, NotAvailable } from \"../../types/types\";\r\n\r\nimport \"./DataBar.scss\";\r\nconst DataBar: React.FC<DataBarProps> = ({\r\n  projectName,\r\n  minutesArray,\r\n  availabilityBars,\r\n}) => {\r\n  // timerange for hovered bar\r\n  const [hoverDetails, setHoverDetails] = useState<String>(\"\");\r\n\r\n  // total not available time for hovered bar\r\n  const [notAvailableTime, setNotAvailableTime] = useState<String>(\"\");\r\n\r\n  // outage data for hovered bar\r\n  const [notAvailableDetails, setNotAvailableDetails] = useState<\r\n    NotAvailable\r\n  >([]);\r\n  const [mouseLocation, setMouseLocation] = useState<MouseCoords>({});\r\n\r\n  // latest availability value\r\n  const lastMinute = minutesArray.slice(-1)[0];\r\n  const currentAvailability = lastMinute.data[19].availability;\r\n\r\n  // filter out all the \"available\" strings in availabilityStrings array\r\n  const uptimeFilter = minutesArray.filter((e) => e.unavailable.length > 0);\r\n  const downtimeLength = uptimeFilter.map((e) => e.unavailable).length;\r\n  // calculate total uptime\r\n  const totalUptime =\r\n    (Math.round(((1440 - downtimeLength) / 1440) * 1000) / 1000) * 100;\r\n\r\n  return (\r\n    <>\r\n      <div className=\"project-container\">\r\n        {/* hover details */}\r\n        {hoverDetails && (\r\n          <HoverElement\r\n            mouseLocation={mouseLocation}\r\n            hoverDetails={hoverDetails}\r\n            notAvailableTime={notAvailableTime}\r\n            notAvailableDetails={notAvailableDetails}\r\n          />\r\n        )}\r\n        {/* display total availability */}\r\n        <div className=\"available-time\">\r\n          <span className=\"project-title\">{projectName}</span>\r\n          <span className={`current-availability ${currentAvailability}`}>\r\n            {currentAvailability}\r\n          </span>\r\n        </div>\r\n        {/* container for one project */}\r\n        <div className=\"bars-container\">\r\n          {availabilityBars.map(\r\n            (availability, i): JSX.Element => (\r\n              <span\r\n                key={i}\r\n                className={`${availability} bar`}\r\n                onMouseOver={(e): void => {\r\n                  const xCoord = e.clientX;\r\n                  const yCoord = e.clientY;\r\n                  setMouseLocation({ xCoord, yCoord });\r\n\r\n                  // set hover details\r\n                  minutesArray[i].data.forEach(() => {\r\n                    const beginning = minutesArray[i].data[0].time;\r\n                    const end = minutesArray[i].data[19].time;\r\n                    setHoverDetails(`${beginning} - ${end}`);\r\n\r\n                    if (minutesArray[i].unavailable.length > 0) {\r\n                      // check if any minutes have \"unavailable\" as status\r\n                      const filterStatus = minutesArray[i].unavailable.filter(\r\n                        (e: any) => e.availability === \"unavailable\"\r\n                      );\r\n                      if (filterStatus.length > 0) {\r\n                        setNotAvailableTime(\r\n                          `Outage for ${minutesArray[i].unavailable.length} minutes`\r\n                        );\r\n                        setNotAvailableDetails(minutesArray[i].unavailable);\r\n                      } else {\r\n                        setNotAvailableTime(\r\n                          `Partial outage for ${minutesArray[i].unavailable.length} minutes`\r\n                        );\r\n                        setNotAvailableDetails(minutesArray[i].unavailable);\r\n                      }\r\n                    } else {\r\n                      setNotAvailableTime(\"\");\r\n                      setNotAvailableDetails([]);\r\n                    }\r\n                  });\r\n                }}\r\n                onMouseLeave={() => setHoverDetails(\"\")}\r\n              ></span>\r\n            )\r\n          )}\r\n        </div>\r\n        {/* container for lower details of the project */}\r\n        <div className=\"timeline-container\">\r\n          <span>24 hours ago</span>\r\n          <span>{`${totalUptime}% availability`}</span>\r\n          <span>Today</span>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DataBar;\r\n","import React from \"react\";\r\nimport dataGenerator from \"../../utils/dataGenerator\";\r\n\r\nimport DataBar from \"../dataBar/DataBar\";\r\n\r\nimport \"./App.scss\";\r\n\r\nfunction App() {\r\n  const projects = [\"Project A\", \"Project B\", \"Project C\", \"Project D\"];\r\n  return (\r\n    <div className=\"App\">\r\n      {projects.map((project) => {\r\n        const { minutesArray, availabilityBars } = dataGenerator();\r\n        return (\r\n          <DataBar\r\n            key={project}\r\n            minutesArray={minutesArray}\r\n            availabilityBars={availabilityBars}\r\n            projectName={project}\r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { \"Service-Worker\": \"script\" },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport \"./index.scss\";\r\n\r\nimport App from \"./components/app/App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}